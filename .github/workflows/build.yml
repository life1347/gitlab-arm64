name: build
on:
  push:
    paths-ignore:
      - README*.md
    branches-ignore:
      # The autobump** branches will be triggered in the pull request,
      # so there is no need to trigger it when pushing.
      - autobump**
  pull_request:
  workflow_dispatch:

  schedule:
    - cron:  '0 0 * * *'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      GITLAB_VERSION: ${{ steps.check-gitlab-version.outputs.GITLAB_VERSION }}
    steps:
      - name: check version
        id: check-gitlab-version
        run: |

          # Initialize the LVersion variable as an empty string
          newVers=""

          # Capture the output of the original command
          versions=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://gitlab.com/gitlab-org/gitlab.git | tail -20 | grep -v "rc" | grep -v "{}" | awk -F'/' '{print $NF}' | awk '{print $1}' | sed 's/-ee//' | awk -F'v' '{print $NF}')

          # Loop over each version to check for the existence of Docker image
          for version in $versions; do
              if [ "$(docker manifest inspect life1347/gitlab:${version}-ee > /dev/null 2>&1; echo $?)" != "0" ]; then
                  # If the Docker image does not exist for this version, append it to newVers
                  newVers+="${version} "
              fi
          done

          # Trim trailing space from newVers
          newVers=$(echo $newVers | xargs)

          # Convert the versions into a JSON array
          json_array="["
          for version in $newVers; do
              json_array+="\"$version\","
          done

          # Remove the last comma and close the JSON array
          json_array=${json_array%,}
          json_array+="]"

          # Print the JSON array
          echo GITLAB_VERSION=${json_array}" >> $GITHUB_OUTPUT

  build:
    if: ${{ needs.version.outputs.GITLAB_VERSION != '' }}
    runs-on: ubuntu-latest
    needs:
      - version
    strategy:
      fail-fast: false
      matrix:
        GITLAB_VERSION: ${{ fromJSON(needs.version.outputs.GITLAB_VERSION) }}
    env:
      RELEASE_PACKAGE: gitlab-ee
      RELEASE_VERSION:  ${{ matrix.GITLAB_VERSION }}-ee.0
      PUSH_TAGS: ${{ matrix.GITLAB_VERSION }}-ee
      # RELEASE_VERSION: ${{ needs.version.outputs.GITLAB_VERSION }}-ee.0
      # PUSH_TAGS: ${{ needs.version.outputs.GITLAB_VERSION }}-ee
    steps:
      - uses: actions/checkout@v3

      - name: docker login to docker.io
        uses: docker/login-action@v2
        # Only builds on the main branch will trigger the push, and forked repositories are excluded
        if: github.ref == 'refs/heads/main'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup binfmt-support
        uses: docker/setup-qemu-action@v2

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      # Generate the push tags for multi-arch manifest
      - name: Generate tags
        id: generate-tags
        run: |
          push_tags=$(echo ${{ env.PUSH_TAGS }} | tr ',' '\n' | xargs -I {} echo "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/gitlab:{}" | tr '\n' ',')
          echo "push_tags=${push_tags}" >> $GITHUB_ENV

      # Generate the push tags for arm64 image (add '-arm64' suffix to the push tags)
      - name: Generate ARM64 tags
        id: generate-arm64-tags
        run: |
          push_arm64_tags=$(echo ${{ env.push_tags }} | tr ',' '\n' | xargs -I {} echo "{}-arm64" | tr '\n' ',')
          echo "push_arm64_tags=${push_arm64_tags}" >> $GITHUB_ENV

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v3
        with:
          context: .
          # Only builds on the main branch will trigger the push, and forked repositories are excluded
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.push_arm64_tags }}
          platforms: linux/arm64
          build-args: |
            RELEASE_PACKAGE=${{ env.RELEASE_PACKAGE }}
            RELEASE_VERSION=${{ env.RELEASE_VERSION }}

      # Create multi-arch manifest (x86-64 reuses official image, arm64 uses the image built in the previous step)
      - name: Docker multi-arch manifest
        # Only builds on the main branch will trigger the push, and forked repositories are excluded
        if: github.ref == 'refs/heads/main'
        shell: python
        env:
          RELEASE_PACKAGE: ${{ env.RELEASE_PACKAGE }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          import os

          RELEASE_PACKAGE = os.environ['RELEASE_PACKAGE']
          RELEASE_VERSION = os.environ['RELEASE_VERSION']

          push_tags = os.environ['push_tags'].split(',')
          push_tags = [tag for tag in push_tags if tag != '']

          def run_command(cmd):
            print(f'RUN: {cmd}')
            os.system(cmd)

          for tag in push_tags:
            print(f'Creating multi-arch manifest for {tag}')
            run_command(f'docker manifest create {tag} --amend {tag}-arm64 --amend docker.io/gitlab/{RELEASE_PACKAGE}:{RELEASE_VERSION}')
            run_command(f'docker manifest push --purge {tag}')
